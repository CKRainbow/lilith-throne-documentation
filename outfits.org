# -*- ispell-change-dictionary: english; -*-
#+TITLE: Outfits
#+AUTHOR: innoxia, bicobus

Outfits are a way to make randomly generated NPCs' outfit generation less
chaotic.

As a final note, I will add support for allowing the automatic generation of
piercings in the next update.

* Tasks to be done for this document [3/6]
:PROPERTIES:
:COOKIE_DATA: todo recursive
:END:
*** DONE for the [[weight][weight]] section

Explain if rarity needs a bigger or smaller number. 100 isn't explicit enough.

*** DONE [[mainWeapons and offhandWeapons][weapons]] write examples for [2/2]:

- [X] mainWeapons
- [X] offhandWeapons

*** TODO [[guaranteedClothingEquips][guaranteedClothingEquips]] [1/3]

- [X] details ~clothing~ tag
- [ ] What is a displaced list?
- [ ] Effect sub-elements are undocumented

*** TODO review [[genericClothingType][genericClothingType]]

What are the conditionals refered in the section? Is it the =conditional=
sub-element or are all sub-elements acting as a filter?

*** TODO review [[clothingType][clothingType]]

Somebody should read what I (bicobus) wrote in order to validate my
understanding.

*** DONE check all links

* coreAttributes

** name

Names are only used for debugging purposes. Still, in case the name is used
elsewhere later on, it's best to give your outfit a suitable (lowercase) name.

#+BEGIN_SRC xml
<name><![CDATA[casual dress with toys]]></name>
#+END_SRC

** description

Again, descriptions are only used for debugging purposes. Still, in case the
name is used elsewhere later on, it's best to give your outfit a suitable
description.

#+BEGIN_SRC xml
<description><![CDATA[A dress hides the fact that the wearer has a toy or two inserted into their orifices...]]></description>
#+END_SRC

** femininity

The femininity needed for someone to generate this outfit.

The three acceptables values are respectively:

1. ~MASCULINE~
2. ~ANDROGYNOUS~ (anyone can use this outfit)
3. ~FEMININE~

#+BEGIN_SRC xml
<femininity>FEMININE</femininity>
#+END_SRC

** worldTypes

The worlds in which this outfit may be used for randomly generated characters.
You can leave this empty, or delete the element entirely, if you do not want
this outfit to be restricted based on ~WorldType~ (so it can be used anywhere).
Values can be found here:
[[https://github.com/Innoxia/liliths-throne-public/blob/dev/src/com/lilithsthrone/world/WorldType.java][src/com/lilithsthrone/world/WorldType.java]]

#+BEGIN_SRC xml
<worldTypes>
	<world>DOMINION</world>
	<world>SUBMISSION</world>
</worldTypes>
#+END_SRC

** outfitTypes

Outfit types that this outfit can be used in. For a list of acceptable
~OutfitTypes~, consult:
[[https://github.com/Innoxia/liliths-throne-public/blob/dev/src/com/lilithsthrone/game/inventory/outfit/OutfitType.java][src/com/lilithsthrone/game/inventory/clothing/OutfitType.java]]

_Note:_ At the time of creation (/v0.3.0.6/), only the ~MUGGER~ outfitType is
used in the game. All outfit types will be added eventually.

#+BEGIN_SRC xml
<outfitTypes>
	<type>CASUAL_DATE</type>
</outfitTypes>
#+END_SRC

** acceptableLegConfigurations

Which leg configurations can equip this outfit. For a list of
~legConfigurations~, see:
[[https://github.com/Innoxia/liliths-throne-public/blob/dev/src/com/lilithsthrone/game/character/body/valueEnums/LegConfiguration.java][src/com/lilithsthrone/game/character/body/valueEnums/LegConfiguration.java]]

#+BEGIN_SRC xml
<acceptableLegConfigurations>
	<legConfiguration>BIPEDAL</legConfiguration>
</acceptableLegConfigurations>
#+END_SRC

** conditional

The condition that needs to be satisfied for someone to generate this outfit.
~npc.hasFetish(FETISH_EXHIBITIONIST)~ should probably always be taken into
account. This conditional instance does *not* support the ~clothingConditionalX~
elements.

- Accepted method calls for the "npc" can be found here:
  [[https://github.com/Innoxia/liliths-throne-public/blob/dev/src/com/lilithsthrone/game/character/GameCharacter.java][src/com/lilithsthrone/game/character/GameCharacter.java]]
- Accepted method calls for the main game (using the ~game~ tag) can be found
  here: [[https://github.com/Innoxia/liliths-throne-public/blob/dev/src/com/lilithsthrone/game/Game.java][src/com/lilithsthrone/game/Game.java]]
- And also here: [[https://github.com/Innoxia/liliths-throne-public/blob/dev/src/com/lilithsthrone/game/dialogue/utils/UtilText.java][com/lilithsthrone/game/dialogue/utils/UtilText.java]]

The method ~initScriptEngine()~ in ~UtilText.java~ shows you what you can get a
handle on.

#+BEGIN_SRC xml
<conditional><![CDATA[!npc.hasFetish(FETISH_EXHIBITIONIST) && npc.hasFetish(FETISH_MASTURBATION) && npc.getFetishDesire(FETISH_SUBMISSIVE).isPositive()]]></conditional>
#+END_SRC

** weight

How likely this outfit is to be randomly chosen out of all available ones.
Default outfits have a weight of 100. As there could be several outfits added to
the weighting method, the chance of this outfit being selected is not able to be
precisely determined.

A bigger number makes the outfits more common. There is no upper limit.

#+BEGIN_SRC xml
<weight>100</weight>
#+END_SRC

* generationAttributes

** Conditional statements

You can define any number of conditional statements to use elsewhere in this
file. They must be enclosed in CDATA tags, and must use a format of
~clothingConditionalX~ or ~condX~, where ~X~ is a unique ~String~ (e.g. ~cond1~,
=condUnderwear=, =clothingConditionalMeleeWeapons= are all valid tags). If they
have the attribute: ~constant="true"~, then they are evaluated once at the start
of clothing generation. If not, they are re-evaluated every time.

Example:

#+BEGIN_SRC xml
<cond1 constant="true"><![CDATA[RND.nextInt(100)<=50]]></cond1>
<cond2 constant="true"><![CDATA[RND.nextInt(100)<=75]]></cond2>
#+END_SRC

** presetColourGroups

Preset colour groups have one of their defined ~randomColour~ randomly chosen
for further use in this XML file. You can have up to 20 ~presetColourGroupX~,
however the numbers must be consecutive. (i.e. You can have
~presetColourGroup1~, ~presetColourGroup2~, and ~presetColourGroup3~, but *not*
~presetColourGroup1~, ~presetColourGroup2~, and ~presetColourGroup4~, as that
skips out a "3".)

Accepted values can be found in the files present in the
[[https://github.com/Innoxia/liliths-throne-public/tree/dev/src/com/lilithsthrone/utils/colours][src/com/lilithsthrone/utils/colours]] directory.

The optional ~singleColour~ attribute, when set to ~true~, means that this group
will always return the same, randomly chosen colour from its list.

Preceding ~presetColourGroups~ can be used, but not succeeding ones. (i.e.
~presetColourGroup3~ could not be used in ~presetColourGroup2~.)

#+BEGIN_SRC xml
<presetColourGroup1 singleColour="true">
	<randomColour>CLOTHING_PINK</randomColour>
	<randOMCOLOUR>CLOTHING_PINK_LIGHT</randomColour>
	<randomColour>CLOTHING_RED_DARK</randomColour>
</presetColourGroup1>

<presetColourGroup2>
	<randomColour>CLOTHING_BLACK</randomColour>
	<randomColour>presetColourGroup1</randomColour>
</presetColourGroup2>

<presetColourGroup3>
	<randomColour>CLOTHING_GOLD</randomColour>
	<randomColour>CLOTHING_SILVER</randomColour>
</presetColourGroup3>

<presetColourGroup4>
	<randomColour>CLOTHING_WHITE</randomColour>
	<randomColour>CLOTHING_PINK_LIGHT</randomColour>
</presetColourGroup4>
#+END_SRC

** mainWeapons and offhandWeapons

Weapons can be added in a similar (although more limited) manner to clothing.
This file doesn't use any weapons. Look at
~res/outfits/innoxia/genericMugger/dominion_masculine.xml~ for a weapon example.

The content present in =mainWeapons= and =offhandWeapons= follow the same rules.
The main weapons block defines which item should be inserted into the
character's main attack slot, where ass the off hand block defines which item to
be inserted into the character's off hand. Each block receive one or several
=weapon= sub elements.

The =weapon= block require the following elements to be present:

 - =conditional= :: references to the conditional statement present in the
   document.
 - =types= :: A list of valid item to be chosen from. It expects [[file:index.org::#item-identifier][item identifiers]].
 - =damageTypes= :: Possible choices available at
   [[https://github.com/Innoxia/liliths-throne-public/blob/dev/src/com/lilithsthrone/game/combat/DamageType.java][src/com/lilithsthrone/game/combat/DamageType.java]]
 - =primaryColours= :: contains a list of =colour= elements, which makes
   references to the preset groups defined previously.
 - =secondaryColours= :: contains a list of =colour= elements, which makes
   references to the preset groups defined previously.

#+BEGIN_SRC xml
<mainWeapons>
	<weapon>
		<conditional><![CDATA[cond1 && !cond2]]></conditional>
		<types>
			<type>innoxia_pipe_pipe</type>
			<type>innoxia_bat_wooden</type>
			<type>innoxia_bat_metal</type>
		</types>
		<damageTypes>
			<damage>PHYSICAL</damage>
		</damageTypes>
		<primaryColours>
			<colour>presetColourGroup1</colour>
		</primaryColours
		<secondaryColours/>
		<!-- 'colours' element can be used in addition to, or as a replacement of, the primary/secondary/tertiary colours elements. It is defined as follows:
		<colours>
			<colour>presetColourGroup1</colour> Individual colours or presetColourGroups can be used.
		</colours>
		-->
	</weapon>
</mainWeapons>
#+END_SRC

#+BEGIN_SRC xml
<offhandWeapons/>
#+END_SRC

** guaranteedClothingEquips

For all of the "conditional" elements from this point onwards, you can use the
tag "clothing" to access the clothing type being handled.

All of the pre-set clothing that /is guaranteed/ to be attempted to be equipped.
The only time these items won't be equipped is when multiple items of clothing
are assigned to the same inventory slot (such as a pair of panties and a thong),
in which case only the first item is used.

#+BEGIN_SRC xml
<guaranteedClothingEquips>
	<uniqueClothing>
		<clothing colour="CLOTHING_SILVER" colourSecondary="CLOTHING_PURPLE_LIGHT" colourTertiary="CLOTHING_BLACK" enchantmentKnown="true" id="innoxia_buttPlugs_butt_plug_jewel" isDirty="false" name="[npc.NamePos(true)] butt-plug" pattern="none" patternColour="CLOTHING_BLACK" patternColourSecondary="CLOTHING_BLACK" patternColourTertiary="CLOTHING_BLACK">
			<effects>
			  <effect itemEffectType="CLOTHING" limit="0" potency="BOOST" primaryModifier="CLOTHING_ATTRIBUTE" secondaryModifier="DAMAGE_POISON" timer="0"/>
			  <effect itemEffectType="CLOTHING" limit="0" potency="MINOR_BOOST" primaryModifier="CLOTHING_ATTRIBUTE" secondaryModifier="DAMAGE_FIRE" timer="0"/>
			</effects>
			<displacedList/>
		</clothing>
	</uniqueClothing>

	<uniqueClothing>
		<conditional><![CDATA[npc.hasVagina()]]></conditional>
		<clothing colour="presetColourGroup2" colourSecondary="CLOTHING_BLACK" colourTertiary="CLOTHING_BLACK" enchantmentKnown="true" id="innoxia_vagina_insertable_dildo" isDirty="false" name="[npc.NamePos(true)] insertable dildo"></clothing>
	</uniqueClothing>
</guaranteedClothingEquips>
#+END_SRC

*** clothing tags

The clothing element expects the following variables:

**** Colours group

Each variable must contain a valid =CLOTHING_= colour.

- colour
- colourSecondary
- colourTertiary

**** enchantmentKnown

No idea. Ask the discord.

**** id

The clothing id. Refer to [[file:index.org::#item-identifier][Item's identifier]].

**** isDirty

Whether the clothing item should spawn dirty.

**** name

Name of the clothing item? I have no idea as to how it'll display within the
game. Ask the discord.

**** pattern

No idea. Ask the discord.

**** pattern colour

Each variable must contain a valid =CLOTHING_= colour.

- patternColour
- patternColourSecondary
- patternColourTertiary

** genericClothingType
Theses elements automatically populate the possible clothing lists with all
clothing in the game that satisfies the conditionals.

#+BEGIN_SRC xml
<genericClothingType>
	<itemTags>
	  <tag>DRESS</tag>
	</itemTags>
	<acceptableFemininities>
		<femininity>FEMININE</femininity>
	</acceptableFemininities>
	<slot/>
	<rarity>COMMON</rarity>
	<conditional/>
	<primaryColours>
		<colour>presetColourGroup1</colour>
	</primaryColours>
	<secondaryColours/>
	<tertiaryColours/>
</genericClothingType>

<genericClothingType> <!-- Generic jewellery. This should probably be used in all outfits, unless you want to manually define your own jewellery. -->
	<itemTags/>
	<acceptableFemininities>
		<femininity>FEMININE</femininity>
		<femininity>ANDROGYNOUS</femininity>
	</acceptableFemininities>
	<slot/>
	<rarity>COMMON</rarity>
	<conditional><![CDATA[clothing.getSlot().isJewellery() && (RND.nextInt(100)<=25 || clothing.getSlot()==IS_PIERCING_EAR)]]></conditional>
	<primaryColours>
		<colour>presetColourGroup2</colour>
	</primaryColours>
	<secondaryColours/>
	<tertiaryColours/>
</genericClothingType>
#+END_SRC

*** itemTag

If tags are defined, then only clothing with the provided tags will be included
for random selection. May be left empty.

Accepted values can be found in the following file:
[[https://github.com/Innoxia/liliths-throne-public/blob/dev/src/com/lilithsthrone/game/inventory/ItemTag.java][src/com/lilithsthrone/game/inventory/ItemTag.java]]

**** tag
If the tag contains the constant ~DRESS~, then all items in the game marked as a
~DRESS~ will be included for random selection.

*** acceptableFemininities

If [[femininity][femininities]] are defined, then only clothing suitable for this femininity
will be included for random selection.

*** slot

If a slot (of type InventorySlot) is defined, then only clothing that fits into
this slot will be included for random selection. Use the Enum values as defined
in [[https://github.com/Innoxia/liliths-throne-public/blob/dev/src/com/lilithsthrone/game/inventory/InventorySlot.java][src/com/lilithsthrone/game/inventory/InventorySlot.java]]

*** rarity

 If a rarity is defined, then only clothing that has this rarity will be
 included for random selection. Accepted values can be found in the following
 file: [[https://github.com/Innoxia/liliths-throne-public/blob/dev/src/com/lilithsthrone/game/inventory/Rarity.java][src/com/lilithsthrone/game/inventory/Rarity.java]]

*** conditional

If a condition is defined, then only clothing that satisfies this condition will
be included for random selection. Wrap the conditional statement in ~CDATA~ tags
if used.

In the following logic, earrings have 100% chance to be equipped. All other
jewellery have a 25% chance instead. These items are automatically skipped if
the character doesn't have the relevant slot accessible. In the case of
jewellery, ears that are not pierced cannot received earrings.

#+BEGIN_SRC
clothing.getSlot().isJewellery() && (RND.nextInt(100)<=25 || clothing.getSlot()==IS_PIERCING_EAR)
#+END_SRC

*** primary, secondary and tertiary colours
*** colours
~colours~ elements can be used in addition to, or as a replacement of, the
primary/secondary/tertiary colours elements. Individual colours or
presetColourGroups can be used.

It is defined as follows:

#+BEGIN_SRC xml
<colours>
	<colour>presetColourGroup1</colour>
</colours>
#+END_SRC

** clothingType

Presumably this block filters items based on the list of types, then each
character that satisfy the =conditional= sub-element is susceptible to be
selected.

The colour references serves as a list of preset colours for this outfit's
condional.

#+BEGIN_SRC xml
<clothingType>
	<conditional><![CDATA[npc.hasBreasts()]]></conditional>
	<types>
		<type>CHEST_PLUNGE_BRA</type>
		<type>CHEST_LACY_PLUNGE_BRA</type>
		<type>CHEST_FULLCUP_BRA</type>
	</types>
	<primaryColours values="LINGERIE"/> <!-- The optional attribute "values" can be used as a pre-set colour list instead of defining individual colours. Accepted values can be found here: https://github.com/Innoxia/liliths-throne-public/blob/master/src/com/lilithsthrone/utils/ColourListPresets.java -->
	<secondaryColours/>
	<tertiaryColours/>
</clothingType>

<clothingType>
	<conditional><![CDATA[npc.getFemininityValue()<75]]></conditional>
	<types>
		<type>FOOT_HEELS</type>
	</types>
	<primaryColours>
		<colour>presetColourGroup2</colour>
	</primaryColours>
	<secondaryColours/>
	<tertiaryColours/>
</clothingType>

<clothingType>
	<conditional><![CDATA[npc.getFemininityValue()>=75]]></conditional>
	<types>
		<type>FOOT_STILETTO_HEELS</type>
	</types>
	<primaryColours>
		<colour>presetColourGroup2</colour>
	</primaryColours>
	<secondaryColours/>
	<tertiaryColours/>
</clothingType>

<clothingType>
	<conditional><![CDATA[cond1]]></conditional>
	<types>
		<type>FINGER_RING</type>
	</types>
	<primaryColours>
		<colour>presetColourGroup2</colour>
	</primaryColours>
	<secondaryColours/>
	<tertiaryColours/>
</clothingType>

<clothingType>
	<conditional><![CDATA[!cond1 || cond2]]></conditional>
	<types>
		<type>NECK_HEART_NECKLACE</type>
	</types>
	<primaryColours>
		<colour>presetColourGroup2</colour>
	</primaryColours>
	<secondaryColours/>
	<tertiaryColours/>
</clothingType>

<clothingType>
	<conditional/>
	<types>
		<type>WRIST_WOMENS_WATCH</type>
	</types>
	<primaryColours>
		<colour>CLOTHING_PINK_LIGHT</colour>
		<colour>CLOTHING_PINK</colour>
	</primaryColours>
	<secondaryColours/>
	<tertiaryColours/>
</clothingType>

<!-- Both "genericClothingType"s and "clothingType"s are shuffled together before being run through and worn, so if two items have the same slot, such as these two headbands, then it's random as to which is worn. -->

<clothingType>
	<conditional><![CDATA[npc.getHairRawLengthValue()>12]]></conditional>
	<types>
		<type>HEAD_HEADBAND_BOW</type>
		<type>HEAD_HEADBAND</type>
	</types>
	<primaryColours>
		<colour>CLOTHING_BLACK</colour>
		<colour>CLOTHING_WHITE</colour>
	</primaryColours>
	<secondaryColours/>
	<tertiaryColours>
		<colour>CLOTHING_PINK_LIGHT</colour>
		<colour>CLOTHING_RED</colour>
	</tertiaryColours>
</clothingType>
#+END_SRC
