# -*- ispell-change-dictionary: english; -*-
#+TITLE: Item Clothing
#+AUTHOR: innoxia, bicobus

Clothing and anything that is wearable, even inside.

For a working example, please consult your [[https://github.com/Innoxia/liliths-throne-public/tree/dev/res/mods/innoxia/items/clothing][res/mods/innoxia/items/clothing]]
folder.

* General Information

_PLEASE NOTE:_ Any clothing item whose rarity is set to LEGENDARY or above will
not show up in the game, as no shopkeepers have been being defined as selling
items of that quality. You can spawn it from the debug menu if you wish. The
debug menu is accessed by typing =buggy= at any point in the game. It is best to
enter the debug menu when not in the middle of combat, sex, or movement-locked
dialogue, as it will break you out of it.

* coreAttributes

** authorTag

Author attribution, if you want one.

Please refer to the explanation on the index about [[file:index.org::#author-tags][author tag]].

#+BEGIN_SRC xml
<authorTag><![CDATA[A tag discreetly sewn into the T-shirt's inner lining informs you that it was made by 'Innoxia'.]]></authorTag>
#+END_SRC

** value

Please refer to the general information about item [[file:index.org::#value][value]].

- Example :: I've defined this as 60, which is about the price for a basic pair
  of socks or something similar.

#+BEGIN_SRC xml
<value>60</value>
#+END_SRC

** determiner
:PROPERTIES:
:CUSTOM_ID: determiner
:END:

The determiner which is displayed before this item's name. While usually "a" or
"an", for things like socks or gloves, you'll want to use "a pair of". I use the
~CDATA~ tag for all text values, as it allows html markup to be embedded without
causing issues.

- Example :: I've defined this as "a pair of", so in-game, this item will be
  referred to as "a pair of socks".

#+BEGIN_SRC xml
<determiner><![CDATA[a pair of]]></determiner>
#+END_SRC

** name

The *singular* name of this clothing.

- Example :: I've named this "template sock", as the singular for "template
  socks" is of course "sock"...

#+BEGIN_SRC xml
<name appendColourName="true"><![CDATA[template sock]]></name>
#+END_SRC

You can leave out the ~appendColourName~ attribute, but if you never want this
clothing to be described by its colour, then set it as false. (i.e. If set to
false, this clothing would always be called "template socks" instead of, for
example, "white template socks".)

** namePlural

The plural form of the name. The attribute 'pluralByDefault' determines whether
this item is naturally referred to as a plural (use true for things like socks
or gloves).

- Example :: I've named the plural as "template socks", and defined
  pluralByDefault as true, so that this item will be referred to by this plural
  name in all but extremely exceptional circumstances.

#+BEGIN_SRC xml
<namePlural pluralByDefault="true"><![CDATA[template socks]]></namePlural>
#+END_SRC

** description

This is the description which is shown in tooltips and on the item's inspection
page.

- Example :: The description for ordinary, "boring" items of clothing might be a
  little dry, but as they won't be read by the player much, it doesn't really
  matter.

#+BEGIN_SRC xml
<description><![CDATA[An ordinary pair of socks, intended to be worn on the feet in order to absorb perspiration and provide both insulation and comfort. A silly person may choose to wear them on their hands...]]></description>
#+END_SRC

** physicalResistance

The default physical resistance for this piece of clothing. Usually use 0, but
if it's armour, then values of 1 up to 5 would be fitting (any more than that
might be very OP). Physical resistance is a very powerful stat, so please keep
within the range of 0-5. For all normal clothing, the value should be 0. This
accepts decimal values, so for things like leather jackets (which aren't really
armour, but are still protective), you can use 0.5 or so.

- Example :: Left as 0, as it's nomral, unarmoured clothing.

#+BEGIN_SRC xml
<physicalResistance>0</physicalResistance>
#+END_SRC

** femininity

Use ~FEMININE~ for if this clothing is intended for feminine characters,
~MASCULINE~ for masculine, and ~ANDROGYNOUS~ if it's able to be worn by anyone
without penalties.

- Example :: Normal socks could be worn by both males and females without issue,
  so I set this to ~ANDROGYNOUS~.

#+BEGIN_SRC xml
<femininity>ANDROGYNOUS</femininity>
#+END_SRC

** equipSlots

The slots that this clothing is able to be fit into. The game only supports up
to 4 unique slots, so if you define more than 4, the rest of them won't show up
in-game. These definitions preserve ordering, so use the top one for the most
common slot to be fitted into. This is especially important for NPCs, as they
will use the top slot for determining which slot this clothing should fit into.

Possible slots are found here:
[[https://github.com/Innoxia/liliths-throne-public/blob/dev/src/com/lilithsthrone/game/inventory/InventorySlot.java][src/com/lilithsthrone/game/inventory/InventorySlot.java]]

- Example :: I defined "SOCK" as the top slot, as this is the intended slot for
  socks. As I also want the player to be able to equip socks onto their hands, I
  defined "HAND" as a secondary slot.

#+BEGIN_SRC xml
<equipSlots>
	<slot>SOCK</slot>
	<slot>HAND</slot>
</equipSlots>
#+END_SRC

** rarity

The rarity of this item. Anything less than EPIC may end up being modified in
the code. Possible rarities are found here:
[[https://github.com/Innoxia/liliths-throne-public/blob/dev/src/com/lilithsthrone/game/inventory/Rarity.java][src/com/lilithsthrone/game/inventory/Rarity.java]]

- Example :: Socks are most definitely ~COMMON~, but I've defined these as
  ~LEGENDARY~ so as to prevent them from naturally spawning in the game.

#+BEGIN_SRC xml
<rarity>LEGENDARY</rarity>
#+END_SRC

** clothingSet

The set that this clothing belongs to. See [[file:setBonuses.org]].

Navigate to [[https://github.com/Innoxia/liliths-throne-public/tree/dev/res/setBonuses][res/setBonuses]] to see existing sets.

- Example: Just use the name of the set.

#+BEGIN_SRC xml
<clothingSet>innoxia_template</clothingSet>
#+END_SRC

** imageName

The file paths for this clothing's image. Please refer to the [[file:index.org::#item-image][documentation
about images]].

- Example :: I've defined this as "sock.svg", which should be placed in the same
  folder location alongside this xml file.

#+BEGIN_SRC xml
<imageName>socks.svg</imageName>
#+END_SRC

** imageEquippedName

The file paths for this clothing's image while equipped. The "slot" attribute
determines the InventorySlot in which the defined file will be used.

- Example :: When equipped to the "SOCK" slot, the sock will be displayed using
  the "sock.svg" file. When equipped to the "HAND" slot, it will instead use the
  "sock_hand.svg" file. Again, this file must be placed in the same folder
  location alongside this xml file.

#+BEGIN_SRC xml
<imageEquippedName slot="SOCK">socks.svg</imageEquippedName>
<imageEquippedName slot="HAND">socks_hand.svg</imageEquippedName>
#+END_SRC

** echantmentLimit

How many enchantments can be fit into this item. It's typically best to let the
game handle the default number of enchantments, which typically results in 100.

- Example :: I have not defined this, as I'll let the game keep the 100
  enchantments default value.

Using default value
#+BEGIN_SRC xml
<enchantmentLimit/>
#+END_SRC

Using custom value
#+BEGIN_SRC xml
<enchantmentLimit>100</enchantmentLimit>
#+END_SRC

** effects

The default effects that this clothing spawns in with. To know what to put in
here, it would probably be easiest to enchant clothing in your game, save the
game, then copy over that clothing's 'effects' in your save file.

- Example :: The first defined effect will give +3 to physical damage, while the
  second will give the wearer the masturbation fetish while worn.

#+BEGIN_SRC xml
<effects>
	<effect itemEffectType="CLOTHING" limit="0" potency="MAJOR_BOOST" primaryModifier="CLOTHING_ATTRIBUTE" secondaryModifier="DAMAGE_PHYSICAL" timer="0"/>
	<effect itemEffectType="CLOTHING" limit="0" potency="MAJOR_BOOST" primaryModifier="TF_MOD_FETISH_BEHAVIOUR" secondaryModifier="TF_MOD_FETISH_MASTURBATION" timer="0"/>
</effects>
#+END_SRC

** blockedPartsList

This section determines how the clothing interacts with other clothing and the
wearer's body.

- Example :: I've defined this section as being the one to be used when equipped
  to the "SOCK" slot.
  #+BEGIN_SRC xml -r
<blockedPartsList slot="SOCK">
	<blockedParts> (ref:bprts)
		<displacementType>REMOVE_OR_EQUIP</displacementType>
		<clothingAccessRequired>
			<clothingAccess>FEET</clothingAccess>
		</clothingAccessRequired>
		<blockedBodyParts>
			<bodyPart>FEET</bodyPart>
		</blockedBodyParts>
		<clothingAccessBlocked/>
		<concealedSlots/>
	</blockedParts>
</blockedPartsList>
  #+END_SRC

This is another section to determines how the clothing interacts with other
clothing and the wearer's body.

- Example :: I've defined this section as being the one to be used when equipped
  to the "HAND" slot.
  #+BEGIN_SRC xml
<blockedPartsList slot="HAND">
	<blockedParts>
		<displacementType>REMOVE_OR_EQUIP</displacementType>
		<clothingAccessRequired>
			<clothingAccess>FINGERS</clothingAccess>
		</clothingAccessRequired>
		<blockedBodyParts/>
		<clothingAccessBlocked/>
		<concealedSlots/>
	</blockedParts>
</blockedPartsList>
  #+END_SRC

*** blockedParts
:PROPERTIES:
:CUSTOM_ID: blocked-parts
:END:

You can add as many [[(bprts)][blockedParts]] elements as you like, but they should each have
a different [[displacementType][displacementType]], and *there should be at least one, of type*
~REMOVE_OR_EQUIP~.

*** displacementType
:PROPERTIES:
:CUSTOM_ID: displacement-type
:END:

If this clothing is displaced in the following way (in this case, by being
removed), then the [[blockedBodyParts][blockedBodyParts]], [[clothingAccessBlocked][clothingAccessBlocked]], and
[[concealedSlots][concealedSlots]] will all be revealed. If multiple [[blockedParts][blockedParts]] block or
conceal the same slot, only one 'blockedParts' needs to be displaced to reveal
it. (e.g. If a pair of trousers has 'UNZIPS' and 'PULLS_DOWN' displacementTypes,
and both of these contain the 'concealedSlots' 'slot' 'PENIS', then the penis
will be revealed if either UNZIPS or PULLS_DOWN is activated.)

A full list of displacementTypes can be found here:
[[https://github.com/Innoxia/liliths-throne-public/blob/dev/src/com/lilithsthrone/game/inventory/clothing/DisplacementType.java][src/com/lilithsthrone/game/inventory/clothing/DisplacementType.java]]

*** clothingAccessRequired
:PROPERTIES:
:CUSTOM_ID: clothing-access-required
:END:

The access required to perform this [[displacementType][displacementType]].

~clothingAccess~ values can be found here:
[[https://github.com/Innoxia/liliths-throne-public/blob/dev/src/com/lilithsthrone/game/inventory/clothing/ClothingAccess.java][src/com/lilithsthrone/game/inventory/clothing/ClothingAccess.java]]

*** blockedBodyParts
:PROPERTIES:
:CUSTOM_ID: blocked-body-parts
:END:

The body parts that are blocked by this [[displacementType][displacementType]].

~bodyPart~ values can be found here:
[[https://github.com/Innoxia/liliths-throne-public/blob/dev/src/com/lilithsthrone/game/character/body/CoverableArea.java][src/com/lilithsthrone/game/character/body/CoverableArea.java]]

*** clothingAccessBlocked
:PROPERTIES:
:CUSTOM_ID: clothing-access-blocked
:END:
The access that this [[displacementType][displacementType]] blocks. Again, clothingAccess values can
be found here: [[https://github.com/Innoxia/liliths-throne-public/blob/dev/src/com/lilithsthrone/game/inventory/clothing/ClothingAccess.java][src/com/lilithsthrone/game/inventory/clothing/ClothingAccess.java]]

This element must contain a list of tag ~clothingAccess~ for values inserted
here.

- Example ::
  #+BEGIN_SRC xml
  <clothingAccess>MOUTH</clothingAccess>
  #+END_SRC

*** concealedSlots
:PROPERTIES:
:CUSTOM_ID: concealed-slots
:END:

The slots that this 'displacementType' conceals. Possible slots are found here:
[[https://github.com/Innoxia/liliths-throne-public/blob/dev/src/com/lilithsthrone/game/inventory/InventorySlot.java][src/com/lilithsthrone/game/inventory/InventorySlot.java]]

You can also use a preset list by adding an attribute named "values" to this
element (an example - "CS Example" - is in the blockedParts section below this
one). The preset lists that you can use are found here:
[[https://github.com/Innoxia/liliths-throne-public/blob/dev/src/com/lilithsthrone/game/inventory/clothing/PresetConcealmentLists.java][src/com/lilithsthrone/game/inventory/clothing/PresetConcealmentLists.java]]

Use the tag ~slot~ for values inserted here.

- Example ::
  #+BEGIN_SRC xml
  <slot>HEAD</slot>
  #+END_SRC

** incompatibleSlots

 Inventory slots that are incompatible with this clothing. The game's swimsuit
 makes use of this, and, while fitting into the 'CHEST' slot, also blocks
 'GROIN' and 'STOMACH'. Possible slots are found here:
 https://github.com/Innoxia/liliths-throne-public/blob/master/src/com/lilithsthrone/game/inventory/InventorySlot.java

- Example :: You need to define an ~incompatibleSlots~ element for each slot
  that the clothing can be equipped into, so here, I've defined an empty one for
  "SOCK", and another empty one for "HAND".
- Example 2 :: If you want to add slots, then use the element like so (which
  would block the FINGER slot when equipped into the WRIST slot):

#+BEGIN_SRC xml
<incompatibleSlots slot="WRIST">
	<slot>FINGER</slot>
</incompatibleSlots>
<incompatibleSlots slot="SOCK"/>
<incompatibleSlots slot="HAND"/>
#+END_SRC

** colours

Please consult the relevant [[file:index.org::#colours][documentation]].

Your clothing can be coloured any way you like, but if you'd like the player to
be able to dye your clothing, you can specify available colours here.
=primaryColours=, =secondaryColours=, and =tertiaryColours= can all spawn in as
a default colour, while their 'Dye' counterparts are only available if the
player chooses to dye the clothing in that colour. The game detects specific
colour values, and recolours them to the value chosen by the player. These
values are as follows:

Colour types can be found in the files present in the following folder:
[[https://github.com/Innoxia/liliths-throne-public/blob/dev/src/com/lilithsthrone/utils/colours][src/com/lilithsthrone/utils/colours]]

*Important:* please use the ~Colour~ values that start with ~CLOTHING_~.

#+BEGIN_SRC xml
<primaryColours recolouringAllowed="true" values="JUST_WHITE"/>
<primaryColoursDye values="ALL"/>
<secondaryColours values="JUST_BLACK"/>
<secondaryColoursDye values="ALL"/>
<tertiaryColours values="JUST_WHITE"/>
<tertiaryColoursDye>
	<colour>CLOTHING_WHITE</colour>
	<colour>CLOTHING_BLACK</colour>
	<colour>CLOTHING_GREY</colour>
	<colour>CLOTHING_RED</colour>
	<!-- ... -->
	<colour>CLOTHING_PINK_LIGHT</colour>
</tertiaryColoursDye>
#+END_SRC

*** customColours
You can define any number of custom colours to replace the shades you've
coloured your svg with.

#+BEGIN_SRC xml
<customColours>
	<customColour copyColourIndex="0" c0="#6C5353" c1="#916F6F" c2="#AC9393" c3="#C8B7B7" c4="#E3DBDB">
		<defaultColours>
			<colour>CLOTHING_GREY</colour> <!-- The colours which this clothing should spawn in with. -->
		</defaultColours>
		<extraColours values="ALL"/> <!-- The colours which this clothing can be dyed to. -->
	</customColour>
</customColours>
#+END_SRC

** patterns

This section details how to define patterns. If your svg file does not have a
~patternLayer~ defined, you can safely delete this whole section:

+ ~defaultPatterns~ :: lists the patterns that this clothing can spawn with.
  - ~patternChance~ :: is the chance that this clothing will spawn with a
    pattern. Values are from 0 to 1, and should end with an "f". i.e. 0.5f is a
    50% chance, 0.75f is 75%, 0.1275 is 12.75%, etc.
  - ~colourNameDerivedFromPattern~ :: sets whether the pattern's primary colour
    should be used for the clothing's name, instead of the "colour" value. i.e.
    If set to ~true~, then a green+black tiger-striped item of clothing would be
    called "green", even if the base colour was something else.
+ ~pattern~ :: Pattern values can be found as svg file names in the folder
  ~res/patterns~

#+BEGIN_SRC xml
<defaultPatterns patternChance="0" colourNameDerivedFromPattern="false"> 
	<pattern>camo</pattern>
</defaultPatterns>
#+END_SRC

*** patternPrimaryColours, patternSecondaryColours, and patternTertiaryColours

Colours work the same as explained in the [[colours][colours]] section.

#+BEGIN_SRC xml
<patternPrimaryColours>
	<colour>CLOTHING_GREEN</colour>
</patternPrimaryColours>
<patternSecondaryColours values="ALL"/>
<patternTertiaryColours/>
#+END_SRC

*** customPatternColours

Custom pattern colours can be defined just like the customColours up above.

#+BEGIN_SRC xml
<customPatternColours/>
#+END_SRC

** itemTags

These tags determine where in the world your clothing can be found, and what
special attributes your clothing should have. Possible tags are found here:
[[https://github.com/Innoxia/liliths-throne-public/blob/dev/src/com/lilithsthrone/game/inventory/ItemTag.java][src/com/lilithsthrone/game/inventory/ItemTag.java]]

~itemTags~ without a =slot= defined will have these tags added to every
equippable slot. Should only be used for generic tags like those related to
which vendors sell it.

~itemTags~ with a =slot= defined will have these tags applied ONLY when the
clothing is equipped into that slot. In this example, equipping the socks onto
your hands hinders arm movement. This is not entirely logical, and I added this
just for demonstration purposes.

#+BEGIN_SRC xml
<itemTags>
	<tag>NOT_FOR_SALE</tag>
</itemTags>
<itemTags slot="HAND">
	<tag>HINDERS_ARM_MOVEMENT</tag>
</itemTags>
#+END_SRC

* sexAttributesSelf
:PROPERTIES:
:CUSTOM_ID: sex-attributes-self
:END:

See the ~res/clothing/innoxia/buttPLugs/butt_plug.xml~ file for a working
example of this element.

These are the sex attributes applicable to the wearer (i.e. when inserted in the
wearer's orifices or when the wearer is penetrating this clothing type. Mainly
used for insertable dildos.)

#+BEGIN_SRC xml
	<sexAttributesSelf>
		<penetration>
			<length>15</length>
			<girth>5</girth>
			<modifiers>
				<mod>VEINY</mod>
			</modifiers>
		</penetration>
		<orifice>
			<depth>0</depth>
			<capacity>0</capacity>
			<elasticity>3</elasticity>
			<plasticity>3</plasticity>
			<wetness>0</wetness>
			<modifiers>
				<mod>PUFFY</mod>
			</modifiers>
		</orifice>
	</sexAttributesSelf>
#+END_SRC
** penetration
+ length :: value in cm
+ grith :: 0-6 corresponding to ~PenetrationGirth Enum~ values
+ modifiers :: For adding modifiers, add =mod= tags containing
  ~PenetrationModifier Enum~ values
** orifice
*Warning!* As of /v0.3.7/, orifice sex toy support is not fully implemented into
the game!

+ depth :: value in cm
+ capacity :: value in cm, corresponding to the diameter of the orifice
+ elasticity :: 0-7 corresponding to ~OrificeElasticity Enum~ values
+ plasticity :: 0-7 corresponding to ~OrificePlasticity Enum~ values
+ wetness :: 0-7 corresponding to ~Wetness Enum~ values
+ modifiers :: list of =mod= tags, each containing ~OrificeModifier Enum~ values

* sexAttributesOther
:PROPERTIES:
:CUSTOM_ID: sex-attributes-other
:END:

These are the sex attributes applicable to someone who is interacting with the
wearer (i.e. the penetration/orifice which is available for people other than
the wearer. Mainly used for strap-on dildos.)

See the ~res/clothing/norin/strapless_dildo/strapless_dildo.xml~ file for a
working example of the following excerpt.

For an explanation of the effects of the different sub elements, please refer to [[#sex-attributes-self][sexAttributesSelf]].


#+BEGIN_SRC xml
<sexAttributesOther>
	<penetration>
		<length>25</length>
		<girth>3</girth>
		<modifiers/>
	</penetration>
	<orifice/>
</sexAttributesOther>
#+END_SRC

* replacementText

The following sections are for defining the descriptions of displacing or
replacing your clothing. The attribute 'type' defines which DisplacementType
your descriptions are applied to. For standard equipping and unequipping, use
~REMOVE_OR_EQUIP~. Types can be found here:
[[https://github.com/Innoxia/liliths-throne-public/blob/dev/src/com/lilithsthrone/game/inventory/clothing/DisplacementType.java][src/com/lilithsthrone/game/inventory/clothing/DisplacementType.java]]

- Example :: This is the equip text for when socks are equipped to the "SOCK"
  slot:

  #+BEGIN_SRC xml
<replacementText slot="SOCK" type="REMOVE_OR_EQUIP">
	<self>
		<![CDATA[[npc.Name] [npc.verb(pull)] the socks on to cover [npc.her] [npc.feet].]]>
	</self>
	<other>
		<![CDATA[[npc.Name] [npc.verb(pull)] the socks onto [npc2.namePos] [npc2.feet].]]>
	</other>
	<otherRough>
		<![CDATA[[npc.Name] roughly [npc.verb(pull)] the socks onto [npc2.namePos] [npc2.feet].]]>
	</otherRough>
</replacementText>
  #+END_SRC

- Example :: This is the equip text for when socks are equipped to the "HAND"
  slot:
  #+BEGIN_SRC xml
<replacementText slot="HAND" type="REMOVE_OR_EQUIP">
	<self>
		<![CDATA[[npc.Name] [npc.verb(pull)] the socks on to cover [npc.her] [npc.hands].]]>
	</self>
	<other>
		<![CDATA[[npc.Name] [npc.verb(pull)] the socks onto [npc2.namePos] [npc2.hands].]]>
	</other>
	<otherRough>
		<![CDATA[[npc.Name] roughly [npc.verb(pull)] the socks onto [npc2.namePos] [npc2.hands].]]>
	</otherRough>
</replacementText>
   #+END_SRC

* displacementText
This section is used for removal and displacement.

- Example :: This is the unequip text for when socks are removed from the "SOCK"
  slot:
  #+BEGIN_SRC xml
<displacementText slot="SOCK" type="REMOVE_OR_EQUIP">
	<self>
		<![CDATA[[npc.Name] [npc.verb(pull)] off [npc.her] socks.]]>
	</self>
	<other>
		<![CDATA[[npc.Name] [npc.verb(pull)] off [npc2.namePos] socks.]]>
	</other>
	<otherRough>
		<![CDATA[[npc.Name] roughly [npc.verb(pull)] off [npc2.namePos] socks.]]>
	</otherRough>
</displacementText>
  #+END_SRC

- Example :: This is the unequip text for when socks are removed from the "HAND"
  slot:
  #+BEGIN_SRC xml
<displacementText slot="HAND" type="REMOVE_OR_EQUIP">
	<self>
		<![CDATA[[npc.Name] [npc.verb(pull)] the socks from off of [npc.her] [npc.hands].]]>
	</self>
	<other>
		<![CDATA[[npc.Name] [npc.verb(pull)] the socks from off of [npc2.namePos] [npc2.hands].]]>
	</other>
	<otherRough>
		<![CDATA[[npc.Name] roughly [npc.verb(pull)] the socks from off of [npc2.namePos] [npc2.hands].]]>
	</otherRough>
</displacementText>
  #+END_SRC
